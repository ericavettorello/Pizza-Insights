import os
import duckdb
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

load_dotenv()

DB_PATH = os.path.join(os.path.dirname(__file__), '..', 'data', 'orders.db')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçï –ü—Ä–∏–≤–µ—Ç! –Ø Pizza Insights Bot!\n\n"
        "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today ‚Äî KPI –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/top ‚Äî –¢–û–ü-—Ç–æ–≤–∞—Ä—ã\n"
        "/ltv ‚Äî –¢–û–ü –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!"
    )

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = duckdb.connect(DB_PATH, read_only=True)
    df = con.execute("""
        SELECT * FROM daily_sales 
        WHERE day = CURRENT_DATE 
        ORDER BY day DESC LIMIT 1
    """).df()
    con.close()
    
    if df.empty:
        await update.message.reply_text("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
    else:
        r = df.iloc[0]
        await update.message.reply_text(
            f"–°–µ–≥–æ–¥–Ω—è ({r['day']}):\n"
            f"–ó–∞–∫–∞–∑–æ–≤: {int(r['orders_cnt'])}\n"
            f"–í—ã—Ä—É—á–∫–∞: {r['revenue']:.2f} ‚Ç¨"
        )

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = duckdb.connect(DB_PATH, read_only=True)
    df = con.execute("SELECT * FROM top_items").df()
    con.close()
    
    if df.empty:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return
    
    lines = ["–¢–û–ü-—Ç–æ–≤–∞—Ä—ã:"]
    for i, r in df.iterrows():
        lines.append(f"{i+1}) {r['sku']}: {int(r['units_sold'])} —à—Ç, {r['revenue']:.2f} ‚Ç¨")
    
    await update.message.reply_text("\n".join(lines))

async def ltv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = duckdb.connect(DB_PATH, read_only=True)
    df = con.execute("SELECT * FROM customers_ltv LIMIT 10").df()
    con.close()
    
    if df.empty:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return
    
    lines = ["–¢–û–ü –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ LTV:"]
    for i, r in df.iterrows():
        lines.append(f"{i+1}) {r['customer']}: {r['lifetime_value']:.2f} ‚Ç¨ ({int(r['orders_cnt'])} –∑–∞–∫–∞–∑–æ–≤)")
    
    await update.message.reply_text("\n".join(lines))

def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("ltv", ltv))
    
    print("üçï Pizza Insights Bot –∑–∞–ø—É—â–µ–Ω!")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    app.run_polling()

if __name__ == "__main__":
    main()
